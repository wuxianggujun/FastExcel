#include "fastexcel/FastExcel.hpp"
#include <iostream>

using namespace fastexcel;
using namespace fastexcel::core;

int main() {
    try {
        // ÂàõÂª∫Â∑•‰ΩúÁ∞ø
        auto workbook = Workbook::create(Path("format_demo.xlsx"));
        if (!workbook) {
            std::cout << "Failed to create workbook" << std::endl;
            return 1;
        }
        
        auto worksheet = workbook->addWorksheet("Ê†ºÂºèÊºîÁ§∫");
        
        std::cout << "=== FastExcel Ëá™Âä®Êç¢Ë°å‰∏éÊï∞Â≠óÊ†ºÂºèÊºîÁ§∫ ===" << std::endl;
        
        // ========== 1. Ëá™Âä®Êç¢Ë°åÊºîÁ§∫ ==========
        std::cout << "\nüìù 1. Ëá™Âä®Êç¢Ë°åÂäüËÉΩ:" << std::endl;
        
        auto wrapStyle = workbook->createStyleBuilder()
            .textWrap(true)                    // üéØ Ëá™Âä®Êç¢Ë°å
            .fontName("Arial")
            .fontSize(11)
            .verticalAlign(core::VerticalAlign::Top)
            .build();
        
        int wrapStyleId = workbook->addStyle(wrapStyle);
        
        worksheet->writeString(0, 0, "ËøôÊòØ‰∏ÄÊÆµÂæàÈïøÁöÑÊñáÊú¨\\n‰ºöËá™Âä®Êç¢Ë°åÊòæÁ§∫\\nÊîØÊåÅÂ§öË°åÂÜÖÂÆπ");
        auto& cell1 = worksheet->getCell(0, 0);
        cell1.setFormat(workbook->getStyles().getFormat(wrapStyleId));
        
        std::cout << "   ‚úÖ ËÆæÁΩÆÂçïÂÖÉÊ†ºËá™Âä®Êç¢Ë°å: .textWrap(true)" << std::endl;
        
        // ========== 2. Êï∞Â≠óÊ†ºÂºèÊºîÁ§∫ ==========
        std::cout << "\nüí∞ 2. Êï∞Â≠óÊ†ºÂºèÂäüËÉΩ:" << std::endl;
        
        // 2‰ΩçÂ∞èÊï∞Ê†ºÂºè
        auto decimalStyle = workbook->createStyleBuilder()
            .numberFormat("0.00")              // üéØ Ëá™ÂÆö‰πâ2‰ΩçÂ∞èÊï∞Ê†ºÂºè
            .rightAlign()
            .build();
        
        // ÁôæÂàÜÊØîÊ†ºÂºè
        auto percentStyle = workbook->createStyleBuilder()
            .percentage()                      // üéØ ÂÜÖÁΩÆÁôæÂàÜÊØîÊ†ºÂºè
            .rightAlign()
            .fontColor(Color(0, 128, 0))       // ÁªøËâ≤
            .build();
        
        // Ë¥ßÂ∏ÅÊ†ºÂºè
        auto currencyStyle = workbook->createStyleBuilder()
            .currency()                        // üéØ ÂÜÖÁΩÆË¥ßÂ∏ÅÊ†ºÂºè
            .rightAlign()
            .fontColor(Color(0, 0, 255))       // ËìùËâ≤
            .build();
        
        // ÁßëÂ≠¶ËÆ°Êï∞Ê≥ï
        auto scientificStyle = workbook->createStyleBuilder()
            .scientific()                      // üéØ ÂÜÖÁΩÆÁßëÂ≠¶ËÆ°Êï∞Ê≥ï
            .rightAlign()
            .build();
        
        // Ëá™ÂÆö‰πâÂçÉÂàÜ‰ΩçÊ†ºÂºè
        auto thousandStyle = workbook->createStyleBuilder()
            .numberFormat("#,##0")             // üéØ ÂçÉÂàÜ‰ΩçÊ†ºÂºè
            .rightAlign()
            .bold()
            .build();
        
        // Êó•ÊúüÊ†ºÂºè
        auto dateStyle = workbook->createStyleBuilder()
            .date()                           // üéØ ÂÜÖÁΩÆÊó•ÊúüÊ†ºÂºè
            .centerAlign()
            .build();
        
        // Ê∑ªÂä†Ê†∑ÂºèÂà∞Â∑•‰ΩúÁ∞ø
        int decimalStyleId = workbook->addStyle(decimalStyle);
        int percentStyleId = workbook->addStyle(percentStyle);
        int currencyStyleId = workbook->addStyle(currencyStyle);
        int scientificStyleId = workbook->addStyle(scientificStyle);
        int thousandStyleId = workbook->addStyle(thousandStyle);
        int dateStyleId = workbook->addStyle(dateStyle);
        
        // ÂÜôÂÖ•Ê†áÈ¢òË°å
        worksheet->writeString(2, 0, "Êï∞ÂÄºÁ±ªÂûã");
        worksheet->writeString(2, 1, "ÂéüÂßãÂÄº");
        worksheet->writeString(2, 2, "Ê†ºÂºèÂåñÂêé");
        worksheet->writeString(2, 3, "Ê†ºÂºè‰ª£Á†Å");
        
        int row = 3;
        
        // 2‰ΩçÂ∞èÊï∞ÊºîÁ§∫
        worksheet->writeString(row, 0, "2‰ΩçÂ∞èÊï∞");
        worksheet->writeNumber(row, 1, 123.456789);
        worksheet->writeNumber(row, 2, 123.456789);
        worksheet->getCell(row, 2).setFormat(workbook->getStyles().getFormat(decimalStyleId));
        worksheet->writeString(row, 3, "0.00");
        std::cout << "   ‚úÖ 2‰ΩçÂ∞èÊï∞Ê†ºÂºè: .numberFormat(\"0.00\")" << std::endl;
        row++;
        
        // ÁôæÂàÜÊØîÊºîÁ§∫
        worksheet->writeString(row, 0, "ÁôæÂàÜÊØî");
        worksheet->writeNumber(row, 1, 0.85);
        worksheet->writeNumber(row, 2, 0.85);
        worksheet->getCell(row, 2).setFormat(workbook->getStyles().getFormat(percentStyleId));
        worksheet->writeString(row, 3, "0.00%");
        std::cout << "   ‚úÖ ÁôæÂàÜÊØîÊ†ºÂºè: .percentage()" << std::endl;
        row++;
        
        // Ë¥ßÂ∏ÅÊºîÁ§∫
        worksheet->writeString(row, 0, "Ë¥ßÂ∏Å");
        worksheet->writeNumber(row, 1, 1234.56);
        worksheet->writeNumber(row, 2, 1234.56);
        worksheet->getCell(row, 2).setFormat(workbook->getStyles().getFormat(currencyStyleId));
        worksheet->writeString(row, 3, "¬§#,##0.00");
        std::cout << "   ‚úÖ Ë¥ßÂ∏ÅÊ†ºÂºè: .currency()" << std::endl;
        row++;
        
        // ÁßëÂ≠¶ËÆ°Êï∞Ê≥ïÊºîÁ§∫
        worksheet->writeString(row, 0, "ÁßëÂ≠¶ËÆ°Êï∞Ê≥ï");
        worksheet->writeNumber(row, 1, 1234567.89);
        worksheet->writeNumber(row, 2, 1234567.89);
        worksheet->getCell(row, 2).setFormat(workbook->getStyles().getFormat(scientificStyleId));
        worksheet->writeString(row, 3, "0.00E+00");
        std::cout << "   ‚úÖ ÁßëÂ≠¶ËÆ°Êï∞Ê≥ï: .scientific()" << std::endl;
        row++;
        
        // ÂçÉÂàÜ‰ΩçÊºîÁ§∫
        worksheet->writeString(row, 0, "ÂçÉÂàÜ‰Ωç");
        worksheet->writeNumber(row, 1, 9876543);
        worksheet->writeNumber(row, 2, 9876543);
        worksheet->getCell(row, 2).setFormat(workbook->getStyles().getFormat(thousandStyleId));
        worksheet->writeString(row, 3, "#,##0");
        std::cout << "   ‚úÖ ÂçÉÂàÜ‰ΩçÊ†ºÂºè: .numberFormat(\"#,##0\")" << std::endl;
        row++;
        
        // Êõ¥Â§öËá™ÂÆö‰πâÊ†ºÂºèÊºîÁ§∫
        std::cout << "\nüé® 3. Êõ¥Â§öËá™ÂÆö‰πâÊ†ºÂºè:" << std::endl;
        
        // Ëá™ÂÆö‰πâÊ†ºÂºè: Ê≠£Êï∞ÁªøËâ≤ÔºåË¥üÊï∞Á∫¢Ëâ≤
        auto customStyle = workbook->createStyleBuilder()
            .numberFormat("[GREEN]0.00;[RED]-0.00")  // üéØ Êù°‰ª∂Ê†ºÂºè
            .rightAlign()
            .build();
        
        int customStyleId = workbook->addStyle(customStyle);
        
        worksheet->writeString(row, 0, "Êù°‰ª∂È¢úËâ≤");
        worksheet->writeNumber(row, 1, -456.78);
        worksheet->writeNumber(row, 2, -456.78);
        worksheet->getCell(row, 2).setFormat(workbook->getStyles().getFormat(customStyleId));
        worksheet->writeString(row, 3, "[GREEN]0.00;[RED]-0.00");
        std::cout << "   ‚úÖ Êù°‰ª∂Ê†ºÂºè: .numberFormat(\"[GREEN]0.00;[RED]-0.00\")" << std::endl;
        
        // ‰øùÂ≠òÊñá‰ª∂
        workbook->save();
        workbook->close();
        
        std::cout << "\nüéâ FastExcel ÂÆåÂÖ®ÊîØÊåÅÊâÄÊúâÊ†ºÂºèÂäüËÉΩ!" << std::endl;
        std::cout << "üìã ÂèØÁî®ÁöÑÊ†ºÂºèËÆæÁΩÆAPI:" << std::endl;
        std::cout << "   üìù Ëá™Âä®Êç¢Ë°å: .textWrap(true)" << std::endl;
        std::cout << "   üí∞ Ë¥ßÂ∏ÅÊ†ºÂºè: .currency()" << std::endl;
        std::cout << "   üìä ÁôæÂàÜÊØî: .percentage()" << std::endl;
        std::cout << "   üî¢ Â∞èÊï∞‰Ωç: .numberFormat(\"0.00\")" << std::endl;
        std::cout << "   üî¨ ÁßëÂ≠¶ËÆ°Êï∞: .scientific()" << std::endl;
        std::cout << "   üìÖ Êó•ÊúüÊ†ºÂºè: .date()" << std::endl;
        std::cout << "   üé® Ëá™ÂÆö‰πâÊ†ºÂºè: .numberFormat(\"[GREEN]0.00;[RED]-0.00\")" << std::endl;
        
        std::cout << "\n‚ú® ÁîüÊàêÁöÑExcelÊñá‰ª∂: format_demo.xlsx" << std::endl;
        
    } catch (const std::exception& e) {
        std::cout << "‚ùå ÈîôËØØ: " << e.what() << std::endl;
        return 1;
    }
    
    return 0;
}